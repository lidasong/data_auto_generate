// Generated by CoffeeScript 1.10.0
(function() {
  var MathUtil, binomialDis, ceil, evenDis, exp, exponentDis, floor, linearDis, normalDis, poissonDis, pow, ref;

  MathUtil = require("./math_util");

  ref = [Math.exp, Math.pow, Math.floor, Math.ceil], exp = ref[0], pow = ref[1], floor = ref[2], ceil = ref[3];

  evenDis = function(p) {
    if (p == null) {
      p = 0.33333;
    }
    if (p < 0 || p > 1) {
      throw new RangeError("计算阶乘n不能为负数");
    } else {
      return [p, 1];
    }
  };

  binomialDis = function(n, p) {
    var i, k, product, ref1, results, total;
    if (p == null) {
      p = 0.5;
    }
    product = MathUtil.product;
    total = 0;
    results = [];
    for (k = i = 0, ref1 = n - 1; 0 <= ref1 ? i <= ref1 : i >= ref1; k = 0 <= ref1 ? ++i : --i) {
      results.push(total += (product(n)) / (product(k)) / (product(n - k)) * Math.pow(p, k) * Math.pow(1 - p, n - k));
    }
    return results;
  };

  poissonDis = function(n, lamda) {
    var i, k, product, ref1, results, total;
    if (lamda == null) {
      lamda = 2;
    }
    product = MathUtil.product;
    total = 0;
    results = [];
    for (k = i = 0, ref1 = n - 1; 0 <= ref1 ? i <= ref1 : i >= ref1; k = 0 <= ref1 ? ++i : --i) {
      results.push(total += Math.pow(lamda, k) * exp(-lamda / product(k)));
    }
    return results;
  };

  normalDis = function(n, mju, delta) {
    var PI, high, i, k, low, ref1, results, total;
    if (mju == null) {
      mju = 0;
    }
    if (delta == null) {
      delta = 1.0;
    }
    PI = Math.PI;
    total = 0;
    low = floor(mju);
    high = floor(n + mju - 1);
    results = [];
    for (k = i = 0, ref1 = n - 1; 0 <= ref1 ? i <= ref1 : i >= ref1; k = 0 <= ref1 ? ++i : --i) {
      results.push(total += 1 / (pow(2 * PI * (pow(delta, 2)), 0.5)) * exp(-(pow(k - mju, 2)) / 2 / pow(delta, 2)));
    }
    return results;
  };

  exponentDis = function(n, lamda) {
    var i, k, ref1, results, total;
    total = 0;
    results = [];
    for (k = i = 0, ref1 = n - 1; 0 <= ref1 ? i <= ref1 : i >= ref1; k = 0 <= ref1 ? ++i : --i) {
      results.push(total += lamda * exp(-lamda * k));
    }
    return results;
  };

  linearDis = function(n) {
    var i, k, ref1, results, total;
    total = 0;
    results = [];
    for (k = i = 1, ref1 = n; 1 <= ref1 ? i <= ref1 : i >= ref1; k = 1 <= ref1 ? ++i : --i) {
      results.push(total += k);
    }
    return results;
  };

  module.exports = {
    evenDis: evenDis,
    binomialDis: binomialDis,
    poissonDis: poissonDis,
    normalDis: normalDis,
    exponentDis: exponentDis,
    linearDis: linearDis
  };

}).call(this);
